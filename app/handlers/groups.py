from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from app.database.queries.group import get_all_groups, get_group_by_id, get_group_by_name, update_group
import app.keyboards as kb
from app.database.models import User
from app.database.queries.user import get_user_by_id, get_users, update_user

from utils.log import logger
from utils.referal import generate_unique_code, get_referal_link
from utils.timetable.updater import update_timetable

from datetime import datetime

class transferring_leadership(StatesGroup):
  user_id = State()

router = Router(name="Groups")

@router.callback_query(F.data == "join_group")
async def join_group_handler(call: CallbackQuery, state: FSMContext):
  await call.message.delete()
  user = await get_user_by_id(call.from_user.id)
  group_name = (await state.get_data())["group_name"]
  group = await get_group_by_name(group_name)
  user = await update_user(user.tg_id, role=1, moved_at=datetime.now(), group_id=group.uid, group_name=group.name)
  await call.message.answer(f"üéâ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –≥—Ä—É–ø–ø–µ <b>{group.name}</b>", parse_mode="html", reply_markup=await kb.get_start_keyboard(user))

@router.callback_query(F.data == "transfer_leadership")
async def transfer_leadership_handler(call: CallbackQuery, state: FSMContext):
  user = await get_user_by_id(call.from_user.id)
  await call.message.delete()
  await call.message.answer(f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–ª–µ–≥—Ä–∞–º id —á–µ–ª–æ–≤–µ–∫–∞ –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ø—Ä–∞–≤ –ª–∏–¥–µ—Ä—Å—Ç–≤–∞.", parse_mode="html", reply_markup=await kb.get_start_keyboard(user))
  await state.set_state(transferring_leadership.user_id)

@router.message(transferring_leadership.user_id)
async def transfer_leadership(message: Message, state: FSMContext):
  user = await get_user_by_id(message.from_user.id)
  
  future_leader_id: int = None
  if message.forward_from:
    future_leader_id = int(message.forward_from.id)
  else:
    future_leader_id = int(message.text)

  try:
    future_leader = await get_user_by_id(future_leader_id)
  except:
    await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", reply_markup=await kb.get_start_keyboard(user))
    await state.clear()
    return
    
  if future_leader is None:
    await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µ (–ø—É—Å—Ç—å –Ω–∞–ø–∏—à–µ—Ç –±–æ—Ç—É).", reply_markup=await kb.get_start_keyboard(user))
    await state.clear()
    return
  elif future_leader.group_id != user.group_id:
    await message.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –ª–∏–¥–µ—Ä—Å—Ç–≤–∞ —á–µ–ª–æ–≤–µ–∫—É –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥—Ä—É–≥–æ–π –≥—Ä—É–ø–ø–µ.", reply_markup=await kb.get_start_keyboard(user))
    await state.clear()
    return
  
  await state.update_data(user_id=future_leader.tg_id)
  await message.answer(f"‚ùó–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –ª–∏–¥–µ—Ä—Å—Ç–≤–∞ <a href='tg://user?id={future_leader.tg_id}'>{future_leader.firstname if future_leader.firstname else ''} {future_leader.lastname if future_leader.lastname else ''}</a>‚ùì", parse_mode="html", reply_markup=kb.transfer_leadership_confirm_keyboard)

@router.callback_query(F.data == "transfer_leadership_confirm")
async def transfer_leadership_confirm_handler(call: CallbackQuery, state: FSMContext):
  user = await get_user_by_id(call.from_user.id)
  group = await get_group_by_id(user.group_id)
  data = await state.get_data()
  future_leader_id = data["user_id"]

  future_leader = await get_user_by_id(future_leader_id)

  await call.message.delete()
  await update_user(user.tg_id, is_leader=False)
  await update_user(future_leader_id, is_leader=True, role=2)
  await update_group(group.uid, leader_id=future_leader_id)
  username = (future_leader.firstname if future_leader.firstname else "") + " " + (future_leader.lastname if future_leader.lastname else "")
  username = username.strip()
  await call.message.answer(
    f"üîÑ <b>–ü—Ä–∞–≤–∞ –ª–∏–¥–µ—Ä–∞ –ø–µ—Ä–µ–¥–∞–Ω—ã!</b>\n\n"
    f"üë§ –ù–æ–≤—ã–π –ª–∏–¥–µ—Ä: <a href='tg://user?id={future_leader_id}'>{username}</a>\n"
    f"‚ö†Ô∏è –¢–µ–ø–µ—Ä—å –≤—ã <i>–æ–±—ã—á–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫</i> –≥—Ä—É–ø–ø—ã",
    parse_mode="HTML"
  )
  await state.clear()

@router.callback_query(F.data == "create_group")
async def create_group_handler(callback: CallbackQuery, state: FSMContext):
  start_user = await get_user_by_id(callback.from_user.id)
  await callback.message.delete()
  msg = await callback.message.answer(f"‚åõ –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã...")
  data = await state.get_data()
  group = await get_group_by_name(data["group_name"])
  try:

    referal_code = None
    while(referal_code == None):
      referal_code = await generate_unique_code()
    
    referal_link = await get_referal_link(referal_code, group.name)
    
    await update_group(group.uid, ref_code=referal_code, is_equipped=True, member_count=group.member_count + 1, leader_id=callback.from_user.id)
    user = await update_user(callback.from_user.id, role=2, group_id=group.uid, group_name=group.name, is_leader=True, moved_at=datetime.now())

    await update_timetable(for_all=False, group_name=group.name)

    await msg.edit_text(
        f"üéâ <b>–ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
        f"‚ñ´Ô∏è –í—ã —Å—Ç–∞–ª–∏ <i>–ª–∏–¥–µ—Ä–æ–º –≥—Ä—É–ø–ø—ã</i>\n"
        f"‚ñ´Ô∏è –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        f"   ‚ûï –î–æ–±–∞–≤–ª—è—Ç—å –∑–∞–¥–∞–Ω–∏—è\n"
        f"   üë• –ü—Ä–∏–≥–ª–∞—à–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        f"   üëë –£–ø—Ä–∞–≤–ª—è—Ç—å –≥—Ä—É–ø–ø–æ–π",
        parse_mode="HTML",
    )
    
    await callback.message.answer(f"üîó <b>–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è:</b>\n\nüëâ {referal_link}", parse_mode="html", reply_markup=await kb.get_start_keyboard(user))
  except Exception as e:
    await update_group(group.uid, ref_code=None, is_equipped=False, member_count=0 , leader_id=None)
    await update_user(start_user.tg_id, role=start_user.role, group_id=None, group_name=None, is_leader=False, moved_at=None)
    await msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ (/start).")
    logger.exception(f"Error creating group: {e}")

  await state.clear()

@router.message(F.text.contains("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–π"))
async def show_group_controller_handler(message: CallbackQuery):
  user = await get_user_by_id(message.from_user.id)
  group = await get_group_by_id(user.group_id)
  all_users_in_group = await get_users(User.group_id == user.group_id)

  all_users_in_group_id = [user.tg_id for user in all_users_in_group]

  def get_link(user_id, firstname, lastname):
    if firstname == None:
      return f"<a href='tg://user?id={user_id}'>{lastname}</a>"
    elif lastname == None:
      return f"<a href='tg://user?id={user_id}'>{firstname}</a>"
    elif firstname == None and lastname == None:
      return f"<a href='tg://user?id={user_id}'>{user_id}</a>"
    else:
      # return f"[{firstname} {lastname}](tg://user?id={user_id})\n"
      return f"<a href='tg://user?id={user_id}'>{firstname} {lastname}</a>"

  users_links = [get_link(user_id, user.firstname, user.lastname) for user_id in all_users_in_group_id]
  users_links = "\n".join(users_links)

  await message.answer(
      f"üëë <b>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–æ–π</b>\n\n"
      f"‚ñ´Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: <code>{group.name}</code>\n"
      f"‚ñ´Ô∏è –õ–∏–¥–µ—Ä: <a href='tg://user?id={group.leader_id}'>{user.firstname if user.firstname else ''} {user.lastname if user.lastname else ''}</a>\n\n"
      f"‚ñ´Ô∏è –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(all_users_in_group)}\n"
      f"üìÉ –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n{users_links}",
      f"üõ† <i>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</i>",
      parse_mode="HTML",
      reply_markup=kb.group_controller_keyboard
  )

@router.callback_query(F.data == "get_group_link")
async def get_group_link_handler(call: CallbackQuery):
  user = await get_user_by_id(call.from_user.id)
  group = await get_group_by_id(user.group_id)
  referal_link = await get_referal_link(group.ref_code, group.name)
  await call.message.answer(f"üîó <b>–°—Å—ã–ª–∫–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è:</b>\nüëâ{referal_link}", parse_mode="html", reply_markup=await kb.get_start_keyboard(user))