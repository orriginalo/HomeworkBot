from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart

from app.database.queries.group import get_all_groups, get_group_by_name, get_group_by_ref
from app.handlers.utils import check_time_moved
import app.keyboards as kb
from app.database.queries.user import get_user_by_id

import re

class joiningToGroup(StatesGroup):
  group_name = State()

class setting_group(StatesGroup):
  group_name = State()

router = Router(name="Start")

@router.message(CommandStart())
async def start(message: Message, state: FSMContext):
  user = await get_user_by_id(message.from_user.id)

  await state.clear()
  if user.role != 0:

    # If referal
    args = message.text.split()
    if len(args) > 1 and args[0] == "/start":
      ref_code = args[1]
      match = re.search(r'invite_([a-zA-Z0-9]+)_', ref_code)
      ref_code = match.group(1) if match else ""
      group = await get_group_by_ref(ref_code)

      if group:
        if user.group_id:
          if group.uid == user.group_id:
            await message.answer("–í—ã —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–µ–Ω–µ–Ω—ã –∫ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ!")
          else:
            if user.is_leader:
              await message.answer("–í—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –¥—Ä—É–≥–æ–π –≥—Ä—É–ø–ø–µ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–¥–∏—Ç–µ –ø—Ä–∞–≤–∞ –ª–∏–¥–µ—Ä—Å—Ç–≤–∞ –¥—Ä—É–≥–æ–º—É —á–µ–ª–æ–≤–µ–∫—É.") 
            else:
              if check_time_moved(user):
                await message.answer(f"–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –¥—Ä—É–≥–æ–π –≥—Ä—É–ø–ø–µ (<b>{group.name}</b>)?\n<i>–í —Å–ª—É—á–∞–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ —Å–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É –≤ —Å–ª–µ–¥—É—é—â–∏–µ 48 —á–∞—Å–æ–≤.</i>", parse_mode="html", reply_markup=kb.do_join_to_group_keyboard)
                await state.set_state(joiningToGroup.group_name)
                await state.update_data(group_name=group.name)
              else:
                await message.answer(f"–í—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω—è—Ç—å –≥—Ä—É–ø–ø—É\n<i>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ 48 —á–∞—Å–æ–≤</i>", parse_mode="html", reply_markup=await kb.get_start_keyboard(user))
        else:
          await message.answer(f"–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ <b>{group.name}</b>?\n<i>–í —Å–ª—É—á–∞–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ —Å–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É –≤ —Å–ª–µ–¥—É—é—â–∏–µ 48 —á–∞—Å–æ–≤.</i>", parse_mode="html", reply_markup=kb.do_join_to_group_keyboard)
          await state.set_state(joiningToGroup.group_name)
          await state.update_data(group_name=group.name)
      else:
        await message.answer("–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É.")


    else:
      if user.group_id is None:
        await message.answer(
            f"üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DomashkaBot!</b>\n\n"
            f"üìù –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —É–∫–∞–∂–∏ <i>–Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã</i> (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>–ø–¥–æ-16</code>, <code>—Ä—ç—Å–¥–æ-12</code>):",
            parse_mode="HTML"
        )
        await state.set_state(setting_group.group_name)
      else:
        await message.answer("–¢—É—Ç –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ. –í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é.", reply_markup=await kb.get_start_keyboard(user))
        
@router.message(setting_group.group_name)
async def set_group_name(message: Message, state: FSMContext):
  if (await state.get_data()).get("group_name") is not None:
    return
  all_groups = await get_all_groups()
  all_groups_names = [group.name.lower() for group in all_groups]
  if message.text.strip().lower() in all_groups_names:
    await state.update_data(group_name=message.text.strip().lower())
    group = await get_group_by_name(message.text.strip().lower())
    if group:
      if group.is_equipped:
        await message.answer("–≠—Ç–∞ –≥—Ä—É–ø–ø–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ —É <i>–ª–∏–¥–µ—Ä–∞</i> –≥—Ä—É–ø–ø—ã.", parse_mode="html")
        await state.clear()
      else:
        await message.answer("–≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ, –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –≤—ã —Å—Ç–∞–Ω–µ—Ç–µ <b>–ª–∏–¥–µ—Ä–æ–º</b> –≥—Ä—É–ø–ø—ã \n\n(–æ —Ç–æ–º —á—Ç–æ –º–æ–∂–µ—Ç –ª–∏–¥–µ—Ä –≥—Ä—É–ø–ø—ã –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –≤ /about)", parse_mode="html", reply_markup=kb.create_group_keyboard)
  else:
    await message.answer("‚ùå –¢–∞–∫–∞—è –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")